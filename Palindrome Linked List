class Solution {
    public boolean isPalindrome(ListNode head) {
        
        if(head == null) return true;
        
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast != null && fast.next != null){ //1st
            fast = fast.next.next;
            slow = slow.next;
        }
        
        slow = reversed(slow); //2nd
        fast = head; //3rd
        
        while(slow != null){ //slow alr pass halfway //4th
            if(fast.val != slow.val){
                return false;
            }
            slow = slow.next;
            fast = fast.next;
        }
        
        return true;
    }

    public ListNode reversed(ListNode head){
        
        ListNode prev = null;
        
        while(head != null){
            ListNode nextNode = head.next;
            head.next = prev;
            prev = head;
            head = nextNode;
        }
        return prev;
    }
}

Exp 1 : 1 -> 2 -> 2 -> 1
1st : fast : 1, 2, null
      slow : 1, 2, 2
      *by the end of the while loop, slow will be at the middle of linked list
2nd : slow : 1, 2, 1, 2
3rd : fast : 1, 2
4th : slow in the middle (1) & head from the left (1) pass together
      return false if slow not equal to fast
      by the end fast will pass half of the original linked list only
      
Exp 2 : 3 -> 2 -> 1 -> 1 -> 2 -> 3
slow : 3, 2, 1, 3, 2, 1 
      *slow will start at 3 in the middle
fast : 3, 2, 1
      *fast will start at 3 in the beginning
Iterate both slow and fast, and slow will loop till the end while fast will get to half only
